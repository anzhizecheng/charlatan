// Code generated by mockery v1.0.0. DO NOT EDIT.

package contract

import mock "github.com/stretchr/testify/mock"

// MockBager is an autogenerated mock type for the Bager type
type MockBager struct {
	mock.Mock
}

// Add provides a mock function with given fields: f
func (_m *MockBager) Add(f Fixture) Bager {
	ret := _m.Called(f)

	var r0 Bager
	if rf, ok := ret.Get(0).(func(Fixture) Bager); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Bager)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MockBager) Get(id string) (Fixture, error) {
	ret := _m.Called(id)

	var r0 Fixture
	if rf, ok := ret.Get(0).(func(string) Fixture); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Fixture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: id
func (_m *MockBager) Has(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MergeWith provides a mock function with given fields: newFixture
func (_m *MockBager) MergeWith(newFixture Bager) (Bager, error) {
	ret := _m.Called(newFixture)

	var r0 Bager
	if rf, ok := ret.Get(0).(func(Bager) Bager); ok {
		r0 = rf(newFixture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Bager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Bager) error); ok {
		r1 = rf(newFixture)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Without provides a mock function with given fields: fixture
func (_m *MockBager) Without(fixture Fixture) Bager {
	ret := _m.Called(fixture)

	var r0 Bager
	if rf, ok := ret.Get(0).(func(Fixture) Bager); ok {
		r0 = rf(fixture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Bager)
		}
	}

	return r0
}
